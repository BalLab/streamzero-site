<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ferris Labs – Overview</title>
    <link>/docs/overview/</link>
    <description>Recent content in Overview on Ferris Labs</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/overview/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Features &amp; Benefits</title>
      <link>/docs/overview/ferris_executor_benefits_features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/overview/ferris_executor_benefits_features/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;FerrisFX&lt;/strong&gt; is a platform for building highly scalable, cross-network  sync or async microservices and agents.&lt;/p&gt;
&lt;p&gt;The unique low learning curve approach significantly reduces the cost of deploying enterprise wide process and integration pipelines across disparate systems at a speed.  While at the same time creating a platform with practically unbound access and ease of integration.&lt;/p&gt;
&lt;p&gt;FX is a ground-up rethink of how both sync and async microservices are built in multi-cloud, highly volatile and fragmented software environments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On FX you are effectively writing large applications by connecting “blocks” of code (Services) through Events.&lt;/strong&gt; An approach that is highly intuitive and in line with iterative agile practices.&lt;/p&gt;
&lt;p&gt;The following is a brief review of some of the benefits and features of FerrisFX. Upcoming features are shown in italics.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Quality&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Low Learning Curve&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Developers can practically learn within an hour how to work with FX.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Highly Scalable&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Built from ground-up for scalability. The event messaging core is based on an Apache Kafka backbone we can transmit MILLIONs of jobs per day to any number of Services without break.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Resource Efficient&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;FX Microservices are deployed in real time as Events comes in. There are not 100s of microservice containers running on your platform. Just 3 components. The Ferris Manager UI, The Event Router and any number Executors.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Plug into anything. Practically Limitless Integrations&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Leverage the whole universe of Library capabilites of Python ( Java, DOTNET or GoLang coming soon) , no need to depend solely on paid pre-packaged modules based on a strict structure and complicated build procedures and vendor lock-in. No-Code or Low-Code take your pick.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Combined Support for Sync and Async Microservices&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Manage both your Async and Sync Service Mesh in a single interface without any expensive and cumbersome 3rd party system.  Reduce the complexity of your infrastructure and the number of components.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Fully Containerised and Easy to Deploy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Pre-packaged Kubernetes Templates with minimal customisation requirements fit straight into your enterprise Kubernetes(and if you dont have one we will build you one). Run in 1 command and Scale as you wish&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;All Ops Data in 1 Secure place&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;We record all events, logs, alerts in Kafka and store them in daily index within Elasticsearch for easy search and loading it into other systems such as Splunk, DataDog, LogTrail etc. A single scalable fault tolerant system to transport events and operational data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Monitor Performance&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;All Service Executions are continuously tracked and recorded by FX allowing you to easily identify bottlenecks in your processing. Execution details can be viewed on the UI or within Kibana/Elasticsearch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Enterprise Friendly User and Project Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;FX can be easily plugged into your identity infrastructure whether OIDC or AD or SAML we support them all. Packages are organised by Projects enabling users to have specific roles and simplify oversight and governance of your platform. Further enhanced by tagging support promoting an enterprise wide shared semantics and Taxonomy of packages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Structured Service Documentation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Provide a readme.md file with your package to document it for users.  Provide an OpenAPI document to automatically expose the end point and document it for users.&lt;/em&gt; &lt;em&gt;Provide a manifest JSON file for describing package.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Developer Friendly GIT integration&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Fits just straight into existing flow. Push to git to activate code. No more, No Less.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Simple Standard and Powerful Event Format&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Based on Cloud Events our event format is Simple JSON which developer already know how to work with. If you know how to read JSON you can build a Microservice.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Simple Easy to understand and use conventions&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;A Microservice consists of a set of scripts run in sequence, receives events as JSON and sends events as JSON. Use a config.json to store configs, use a secrets.json to store secrets. Store files in /tmp. You can use any Python libraries and also deploy your won packages with each service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Selective Feature Support&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Our &amp;lsquo;Everything is Optional&amp;rsquo; approach to the convetions support by services means that developers can incrementally improve the quality of their code as they get more familiar with the system. A base service is just a single script and then they can build up to support configurations, UI, reusable packages,  published interface packages or custom image execution.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Support for Enterprise Specific Library Distributions&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Package Enterprise Specific Libraries into the base executor for use by all executors within the enterprise. Saving Huge amounts of development time.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Real Time Code Updates&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Our near real time deploy means code changes are immediately active.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Run AB Testing with Ease&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Plug different code versions to same event to measure differences.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;RUN Anything&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Our unique RUN ANYTHING architecture furthers breaks boundaries of running polyglot container systems. Simply tell the system on which image a code is to execute.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Activate or Deactivate Services in Realtime&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Services can be activated when you need them.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Instant Scaling&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Just increase the number of Router or Executor replicas to process faster (provided your underlying services can support it)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;View Logs in Realtime&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;View the Logs of any executor in Realtime directly on the Management UI.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;View Event Dependencies Easily&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Have an error? Trace easily the events which led to the Error with all the parameters used to run the event flow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;UI Support for Microservices&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Drop in a metadata.json file to auto generate UIs for entering parameters for a specific package.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Easy Aggregated Logging&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;All services logs are aggregated and searchable and viewable in realtime. Developers can log easily.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Adaptive Event Schema&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;FX is continuously scanning the incoming events to populate the event catalog and their schema. Making it easier for developers to write services which react to the platform events. Continuously updating you on the Events within your platform.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Parallel Event Processing and Flows&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The same Event can be sent to multiple services for processing. Enabling multiple flows to be triggered.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Anonymous and Published Interfaces&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Services can easily standardise and publish their interfaces making them available in the &amp;lsquo;No-Code&amp;rsquo; flows.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Event Mapping&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Easily map parameters of one event to another event. Allowing you to easily link event flows together.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Event Tagging&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Tag events. Enabling you to organise event groups by domain.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Execution Prioritisation and Cancellation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Granular queue management to prioritise or cancel specific executions if there is a backlog.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Modular Easily Extendible UI&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Add modular custom UIs to the management interface using FX extensions to the Flask App Builder for creating a custom Management UI.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Architecture Overview</title>
      <link>/docs/overview/architecture-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/overview/architecture-overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;concepts&#34;&gt;Concepts&lt;/h2&gt;
&lt;p&gt;FerrisFX is based on 2 simple concepts - &lt;strong&gt;Services&lt;/strong&gt; and &lt;strong&gt;Events&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On FX you are effectively writing large applications by connecting “blocks” of code through Events.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/image-20211024081829495.png&#34; alt=&#34;image-20211024081829495&#34;&gt;&lt;/p&gt;
&lt;p&gt;Each Service is a self contained piece of functionality such as loading a file, running a database view rebuild or launching a container. You can link and re-link the blocks of code at anytime you like. The source code can be as big or as tiny as you like.&lt;/p&gt;
&lt;p&gt;Each Service is triggered by an Event. Each Service also emits Events thereby allowing other Services to be triggered following (or during) the execution of a Service.&lt;/p&gt;
&lt;p&gt;A Service can respond to multiple Event types, and a single Event Type may trigger multiple Services - Thereby allowing you to also extend your Application(s) on the fly with ease.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/image-20211024080659941.png&#34; alt=&#34;image-20211024080659941&#34;&gt;&lt;/p&gt;
&lt;p&gt;You are not required to think in terms of pre-defined DAGS and can rapidly and iteratively build, test and deploy your applications.&lt;/p&gt;






&lt;p&gt; 
            &lt;img src=&#34;/images/list_projects_add_roboto.png&#34; style=&#34;border:2px solid #fff;
            box-shadow: 10px 10px 5px #ccc;
            -moz-box-shadow: 10px 10px 5px #ccc;
            -webkit-box-shadow: 10px 10px 5px #ccc;
            -khtml-box-shadow: 10px 10px 5px #ccc;&#34;/&gt;
&lt;/p&gt;

&lt;h3 id=&#34;services&#34;&gt;Services&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SERVICES&lt;/strong&gt; are collections of scripts and modules which are executed in sequence by the &lt;strong&gt;FX Executor&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Services are triggered by &lt;strong&gt;EVENTS&lt;/strong&gt;, which are JSON messages which carry a header and payload. A Service can be Linked to one or more events.&lt;/p&gt;
&lt;p&gt;Each script is provided with the Payload of the Event that triggered it. It is the job of the &lt;strong&gt;FX Router&lt;/strong&gt; to send Events to the appropriate Service.&lt;/p&gt;
&lt;p&gt;The following is a basic Service which parses the event sent to it and prints the payload.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello_world&lt;/span&gt;(payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arg[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello_world(payload)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;events&#34;&gt;Events&lt;/h3&gt;
&lt;p&gt;Events are messages passed through the platform which are generated either by Services or by the Ferris Manager(in the case of manually triggered runs and scheduled runs).&lt;/p&gt;
&lt;p&gt;Events are in the form of JSON formatted messages which adhere to the CloudEvents format.&lt;/p&gt;
&lt;p&gt;Events carry a Header which indicates the event type and a Payload (or Data section) which contain information about the event.&lt;/p&gt;
&lt;p&gt;The following is a sample Event.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;specversion&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.someevent&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// The Event Type
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/mycontext&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;subject&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C234-1234-1234&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2018-04-05T17:31:00Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;datacontenttype&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt; : {                       &lt;span style=&#34;color:#75715e&#34;&gt;// The event payload as JSON
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appinfoA&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appinfoB&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;appinfoC&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;service-triggering&#34;&gt;Service Triggering&lt;/h3&gt;
&lt;p&gt;Services can be triggered in the following ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manually: By clicking the &amp;lsquo;Run&amp;rsquo; button on the FerrisFX Management Server.&lt;/li&gt;
&lt;li&gt;On Schedule: As a cron job whereas the Cron expression is added on the UI.&lt;/li&gt;
&lt;li&gt;On Event: Where a package is configured to be triggered bt the FX Router when a specific type of event is observed on the platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Irrespective of how a Service is triggered it is always triggered by an Event. In the case of Manual and Scheduled triggering it is the FX platform that generates the trigger event.&lt;/p&gt;
&lt;h3 id=&#34;late-linking&#34;&gt;Late Linking&lt;/h3&gt;
&lt;p&gt;One of the most important features of the FX Platform is that you are not required to link the Service to an Event during the course of development. And you can also change the Trigger Event(s) post-deployment.&lt;/p&gt;
&lt;p&gt;This approach gives you a great flexibility to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not having to think of pre-defined flows but to build the Flow as well as the Services iteratively.&lt;/li&gt;
&lt;li&gt;maintain and test multiple versions of the same Service in parallel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-ferrisfx-flow&#34;&gt;The FerrisFX Flow&lt;/h2&gt;
&lt;p&gt;At the core of the FX Platform messages (Events) are passed through &lt;strong&gt;Apache Kafka&lt;/strong&gt;. These &amp;rsquo;events&amp;rsquo; are JSON formatted messages which adhere to the CloudEvents format.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/image-20211024083411584.png&#34; alt=&#34;image-20211024083411584&#34;&gt;&lt;/p&gt;
&lt;p&gt;Each &lt;strong&gt;Event&lt;/strong&gt; consists of what may be simplified as Headers and Payload. The headers indicate the type of event and other attributes. Whereas the payload are the attributes or parameters that are sent out by Services in order to either provide information about their state or for usage by downstream Services.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;FX Router(s)&lt;/strong&gt; is listening on the stream of Events passing through Kafka. Based on the configuration of the platform which is managed in the &lt;strong&gt;Ferris Manager UI&lt;/strong&gt; the Router decides if a Service requires to be executed based on the Event contents. On finding a configured Handler the gateway sends a message to the Executor and informs it of which packages or scripts are required to be run.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;FX Executor(s)&lt;/strong&gt; downloads the Service from the &lt;strong&gt;Minio&lt;/strong&gt; storage and executes the &lt;strong&gt;Service&lt;/strong&gt;. The Service may use any Python module that is embedded in the Executor and also use &lt;strong&gt;Consul&lt;/strong&gt; for storing its configurations. The Executor sends a series of Events on Service execution. These are once again processed by the FX Router.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/image-20211024084807506.png&#34; alt=&#34;image-20211024084807506&#34;&gt;&lt;/p&gt;
&lt;p&gt;The FX Executor provides infrastructure which tracks logs, maintains record of service metrics and operational data. The Operational information is first sent to appropriate Kafka Topics from where they are picked up by Ops-Data Sinks whose role it is to store data within &lt;strong&gt;Elasticsearch&lt;/strong&gt; and in some cases also filter the data for the purpose of alerting or anomaly tracking. All operational data may be viewed and queried through tools such as &lt;strong&gt;Kibana&lt;/strong&gt; and is also viewable on the &lt;strong&gt;FX Manager UI&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;required-infrastructure&#34;&gt;Required Infrastructure&lt;/h2&gt;
&lt;p&gt;The following are the infrastructure components required for a FerrisFX installation&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Apache Kafka&lt;/td&gt;
&lt;td&gt;Apache Kafka serves as the backbone to pass events and operational data within a FerrisFX Installation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;Postgres is used as the database for the FerrisFX Manager Application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Consul&lt;/td&gt;
&lt;td&gt;Consul is the configuration store used by the FerrisFX platform. It is also used by the services to store their configurations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MinIO&lt;/td&gt;
&lt;td&gt;Minio provides the platform internal storage for scripts and assets used by the Services.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Elasticsearch&lt;/td&gt;
&lt;td&gt;Elasticsearch is used as a central store for all operational data. Thereby making the data easiliy searchable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kibana&lt;/td&gt;
&lt;td&gt;Kibana is used to view and query the data stored in Elasticsearch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FerrisFX-Manager&lt;/td&gt;
&lt;td&gt;FerrisFX Manager is the main UI used for all activities on the FerrisFX platform.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FerrisFX-Router&lt;/td&gt;
&lt;td&gt;The Route container is responsible for listenting to events flowing through the system and forwarding the events to the appropriate micro-services that you create.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FerrisFX-Executor&lt;/td&gt;
&lt;td&gt;The executor container(s) is where the code gets executed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
  </channel>
</rss>
